<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PCG的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pcging.github.io/"/>
  <updated>2019-03-29T07:36:18.365Z</updated>
  <id>https://pcging.github.io/</id>
  
  <author>
    <name>PCG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础系列（一）：基础数据类型</title>
    <link href="https://pcging.github.io/2019/03/29/fistBllog/"/>
    <id>https://pcging.github.io/2019/03/29/fistBllog/</id>
    <published>2019-03-29T03:46:57.000Z</published>
    <updated>2019-03-29T07:36:18.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型，1种用于表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型</p><h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><p>整型用于表示没有小数部分的数值，允许为负。</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>int</td><td style="text-align:center">4字节</td><td style="text-align:right">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td>short</td><td style="text-align:center">2字节</td><td style="text-align:right">-32,768 ~ 32,767</td></tr><tr><td>long</td><td style="text-align:center">8字节</td><td style="text-align:right">-9,223,372,036,854,775,808 ~ 9223,372,036,854,775,807</td></tr><tr><td>byte</td><td style="text-align:center">1字节</td><td style="text-align:right">-128 ~ 127</td></tr></tbody></table><p>在Java中，整形的范围与运行Java代码的机器无关。这解决了软件从一个平台移植到另外一个平台，或者在同一个平台的不同操作系统之间进行移植给程序员带来的麻烦。<br>长整形（Long类型）数值后有一个后缀 L 或 l（这里建议不要使用小写的 l 来标识，因为在某些字体的格式下，1和 l 几乎没有任何区别，给月阅读的人带来很大的困扰）。<br>十六进制数值前缀为 0x 或 0X，这里需要说一点，八进制的前缀是0，比如010，这样的写法比较容易让人混淆，所以我们一般不要使用八进制来表示数据。<br>二进制数值的前缀为 0b 或 0B，例如0b1001所代表的十进制数据就是9。<br>从Java7开始，可以在数字字面量加下划线，比如1_000_000，这些下划线的作用仅仅是使代码的易读性更高，编译器在编译的时候会去除这些下划线。</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p>浮点类型用于表示有小数部分的数值，在Java中有两种浮点类型。</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>float</td><td style="text-align:center">4字节</td><td style="text-align:right">大约±3.402,823,47E+38F(有效位为6-7位)</td></tr><tr><td>double</td><td style="text-align:center">8字节</td><td style="text-align:right">大约±1.79769313486231570E+308（有效位15位）</td></tr></tbody></table><p>double表示这种类型的数值精度是float类型的两倍（故有人称double为双精度数值），事实上我们在使用的过程中，绝大多数情况都会选用double，因为float的精度通常无法满足我们的要求。</p><p>float类型的数值有一个后缀 f 或 F，没有后缀的浮点值就是double类型的。</p><p>可以使用十六进制来表示浮点数值，例如 0.125（2的负三次方）可以表示为 0x1.0p-3。在十六进制中，使用p表示指数，而不是e。</p><p>三个特殊的浮点数值:</p><ol><li>正无穷大(Double.POSITIVEINFINITY)</li><li>负无穷大(Double.NEGATIVEINFINITY)</li><li>NAN（Double.NaN）</li></ol><h1 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h1><p>一个或两个char类型的数值可以用来表示一个Unicode字符，在代码中，char类型的字面量值需要用单引号括起来，char类型的值可以表示为以 \u 开头的16进制数值，用于表示一些标点和特殊符号所用。</p><p>一些较为特殊的字符的转移序列如下：</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>\b</td><td style="text-align:center">退格</td><td style="text-align:right">\u0008</td></tr><tr><td>\t</td><td style="text-align:center">制表</td><td style="text-align:right">\u0009</td></tr><tr><td>\n</td><td style="text-align:center">换行</td><td style="text-align:right">\u000a</td></tr><tr><td>\r</td><td style="text-align:center">回车</td><td style="text-align:right">\u000d</td></tr><tr><td>\”</td><td style="text-align:center">双引号</td><td style="text-align:right">\u0022</td></tr><tr><td>\’</td><td style="text-align:center">单引号</td><td style="text-align:right">\u0027</td></tr><tr><td>\</td><td style="text-align:center">反斜杠</td><td style="text-align:right">\u005c</td></tr></tbody></table><p><strong> Unicode转义序列会在解析代码之前得到处理（大坑慎入！） </strong></p><p><code>// download uri d:\user\a，这里会报语法错误，因为 \u 后面没有跟着4个十六进制数。</code></p><h1 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h1><p>布尔类型有两个值：false和true，用来判定逻辑条件，整型值和布尔值之间不能互相转换，这一点与C或C++不同，需要留意一下。</p><hr><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《Core Java Volume Ⅰ-Fundamentals》 – Cay S.Horstmann</p><h1 id="下一节"><a href="#下一节" class="headerlink" title="下一节"></a>下一节</h1><p><a href="http://baidu.com" target="_blank" rel="noopener">Java基础专题（二）：运算符</a></p><p>本节转自<a href="https://blog.csdn.net/vi_young_95/article/details/80503287" target="_blank" rel="noopener">https://blog.csdn.net/vi_young_95/article/details/80503287</a></p><div align="center"><img src="/img/viYoung.dib" alt="微信扫一扫，关注原创公众号" title="微信扫一扫，关注原创公众号">微信扫一扫，关注原创公众号</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型
      
    
    </summary>
    
    
      <category term="javabasic" scheme="https://pcging.github.io/tags/javabasic/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pcging.github.io/2019/03/29/hello-world/"/>
    <id>https://pcging.github.io/2019/03/29/hello-world/</id>
    <published>2019-03-29T01:53:25.582Z</published>
    <updated>2019-03-29T01:53:25.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
