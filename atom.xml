<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PCG的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pcging.cn/"/>
  <updated>2019-04-02T09:47:48.262Z</updated>
  <id>http://pcging.cn/</id>
  
  <author>
    <name>PCG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础系列（三）：字符串</title>
    <link href="http://pcging.cn/2019/04/02/string/"/>
    <id>http://pcging.cn/2019/04/02/string/</id>
    <published>2019-04-02T09:47:00.000Z</published>
    <updated>2019-04-02T09:47:48.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从概念上来讲，Java字符串就是Unicode字符序列。例如，”Java&#8482;” 由5个Unicode字符J、a、v、a和&#8482;。Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类，叫做String。每个用双引号括起来的字符串都是String类的一个实例。</p><h1 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h1><p>String类的substring()方法可以从一个较大的字符串里提取出一个字串。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String greeting  = &quot;Hello&quot;;</span><br><span class="line">String s = greeting.substring(0,3); //s = &quot;Hel&quot;</span><br></pre></td></tr></table></figure></p><p>substring()方法的第二个参数是不想复制的第一个位置。这里要复制的位置为0、1、2（从0到2，包括0和2）的字符。在substring()中从0开始计数，直到3为止，但不包括3。substring()有一个优点：容易计算字符串的长度。即substring(a,b)的长度为b-a。例如，字符串”Hel”的长度为3-0=3</p><h1 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h1><p>与绝大多数的程序设计语言一样，Java语言允许使用 + 号连接（拼接）两个字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String expletive = &quot;Expletive&quot;;</span><br><span class="line">String PG13 = &quot;deleted&quot;;</span><br><span class="line">String message = expletive + PG13; //message = &quot;Expletivedeleted&quot;</span><br></pre></td></tr></table></figure><p>当将一个字符串与一个非字符串的值进行拼接时，后者会被自动转换成字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int age = 13;</span><br><span class="line">String rating = &quot;PG&quot; + age; //rating = &quot;PG13&quot;</span><br></pre></td></tr></table></figure><p>如果需要将多个字符串连接在一起，并用定界符分离，可以使用静态join()方法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String size = String.join(&quot; / &quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;);</span><br><span class="line">//size = &quot;S / M / L / XL&quot;</span><br></pre></td></tr></table></figure><h1 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h1><p>由于不能修改Java字符串中的字符，所以在Java文档中将String类对象称为不可变字符串，如同数字3永远是数字3一样，字符串”Hello”永远包含字符H、e、l、l、o的代码单元序列，而不能修改其中的任何一个字符。当然，可以修改字符串常量，让它引用另一个字符串</p><p>不可变字符串的优点是：编译器可以让字符串共享，即各种字符串存储在公共的存储池中，字符串变量值也存储于存储池中相应的位置，如果复制一个字符串变量，原始字符串与复制的字符串共享相同的字符。</p><p>Java的设计者认为共享所带来的高效率远远胜与提取，拼接字符串所带来的低效率，因为我们很少需要修改字符串，更多的，我们是对字符串进行比较。</p><h1 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h1><p>可以使用equals()方法判断两个字符串是否相等，对于表达式：</p><p><code>s.equals(t)</code></p><p>如果字符串s与字符串t相等，则返回true；否则返回false。需要注意：s和t可以是字符串变量，也可以是字符串字面量。如果要检测两个字符串是否相等，而不区分大小写，可以使用equalslgnoreCase()方法。例如：</p><p><code>&quot;Hello&quot;.equalslgnoreCase(&quot;hello&quot;); //结果为true</code></p><p><strong>一定不要使用==运算符检测两个字符串是否相等！！！</strong>这个运算符只是确定两个字符串是否放在同一个位置上，当然，如果字符串放置在同一个位置上，他们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放在不同的位置上。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a = &quot;123&quot;;</span><br><span class="line">String b = &quot;123&quot;;</span><br><span class="line">String c = new String(&quot;123&quot;);</span><br><span class="line">String d = new String(&quot;123&quot;);</span><br><span class="line">System.out.println(a==b);           //true</span><br><span class="line">System.out.println(b==c);           //false</span><br><span class="line">System.out.println(c==d);           //false</span><br><span class="line">System.out.println(c.equals(d));    //true</span><br><span class="line">System.out.println(&quot;hello&quot;.substring(0,3)==&quot;hel&quot;)   //false</span><br></pre></td></tr></table></figure></p><p>因为只有字符串常量是共享的，而重新定义、截取、拼接产生的结果都不是共享的，所以千万不要用 == 运算符测试字符串的相等性！</p><h1 id="空串与null"><a href="#空串与null" class="headerlink" title="空串与null"></a>空串与null</h1><p>空串 <code>&quot;&quot;</code>是长度为0的字符串。可以调用以下代码检查一个字符串是否为空：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;&quot;</span><br><span class="line">if(str.length() == 0)&#123;</span><br><span class="line">    //字符串为&quot;&quot;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;&quot;</span><br><span class="line">if(str.equals(&quot;&quot;))&#123;</span><br><span class="line">    //字符串为&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空串是一个Java对象，有自己的长度（0）和内容（空）。不过，String变量还可以存放一个特殊的值，名为null，这表示目前没有任何对象与该变量关联。</p><h1 id="常用String-API"><a href="#常用String-API" class="headerlink" title="常用String API"></a>常用String API</h1><ul><li><strong>char charAt (int index) </strong>返回给定位置的代码单元。除非对底层的代码单元感兴趣，否则不需要调用这个方法。</li><li><strong>int compareTo(String other) </strong>按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之后，返回一个正数；如果两个字符串相等，返回0</li><li><strong>boolean equals(Object other) </strong>如果字符串与other相等，返回true</li><li><strong>boolean equalsIgnoreCase(String other) </strong>如果字符串与other相等（忽略大小写），返回true</li><li><strong>boolean startWith(String prefix) </strong></li><li><strong>boolean endWith(String suffix) </strong>如果字符串以prefix（suffix）开头（结尾），则返回true</li><li><strong>int indexOf(String str)</strong></li><li><strong>int indexOf(String str, int fromIndex)</strong></li><li><strong>int indexOf(int cp)</strong></li><li><strong>int indexOf(int cp, int fromIndex) </strong>返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromIndex开始计算。如果原始串中不存在str，返回-1</li><li><strong>int lastIndexOf(String str)</strong></li><li><strong>int lastIndexOf(String str, int fromIndex)</strong></li><li><strong>int lastIndexOf(int cp)</strong></li><li><strong>int lastIndexOf(int cp, int fromIndex) </strong>返回与字符串str或代码点cp匹配的最后一个子串的位置。这个位置从原始串尾端或fromIndex开始计算</li><li><strong>int length() </strong>返回字符串的长度</li><li><strong>String replace(CharSequence oldString, CharSequence newString) </strong>返回一个新字符串，这个字符串用newString代替原始字符串中的所有oldString。可以用String或StringBuilder对象作为CharSequence参数</li><li><strong>String substring(int beginIndex)</strong></li><li><strong>String substring(int beginIndex, int endIndex) </strong>返回一个新字符串。这个字符串包含原始字符串中从beginIndex到串尾或endIndex - 1的所有代码单元</li><li><strong>String toLowerCase()</strong></li><li><strong>String toUpperCase() </strong>返回一个新字符串，这个字符串将原始字符串中的大写字母改为小写，或者将原始字符串中的所有小写字母改成了大写字母。</li><li><strong>String trim() </strong>返回一个新字符串，这个字符串将删除了原始字符串头部和尾部的空格。</li><li><strong>String join(CharSequence delimiter, CharSequence…elements) </strong>返回一个新字符串，用给定的定界符连接所有元素。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/30326049/" target="_blank" rel="noopener">Core Java Volume Ⅰ-Fundamentals</a></p><p>上一节：<a href="http://pcging.cn/2019/03/29/operator/">Java基础专题（二）：运算符</a></p><p>本节转自<a href="https://blog.csdn.net/vi_young_95/article/details/80724492" target="_blank" rel="noopener">https://blog.csdn.net/vi_young_95/article/details/80724492</a></p><div align="center"><img src="/img/viYoung.dib" alt="微信扫一扫，关注原创公众号" title="微信扫一扫，关注原创公众号">微信扫一扫，关注原创公众号</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从概念上来讲，Java字符串就是Unicode字符序列。例如，”Java&amp;#8482;” 由5个Unicode字符J、a、v、a和&amp;#848
      
    
    </summary>
    
    
      <category term="javabasic" scheme="http://pcging.cn/tags/javabasic/"/>
    
  </entry>
  
  <entry>
    <title>Java基础系列（二）：运算符</title>
    <link href="http://pcging.cn/2019/04/02/operator/"/>
    <id>http://pcging.cn/2019/04/02/operator/</id>
    <published>2019-04-02T03:46:57.000Z</published>
    <updated>2019-04-02T09:46:01.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>算术运算符的运算结果为整型值或者浮点值</p><p>算术运算符如下表所示：</p><p>设 a = 1 , b = 2</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">将运算符两侧数值相加</td><td style="text-align:center">a + b = 3</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">将运算符左侧数值减去右侧数值</td><td style="text-align:center">a - b = -1</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">将运算符两侧数值相乘</td><td style="text-align:center">a * b = 2</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">将运算符左侧数值除以右侧数值</td><td style="text-align:center">b / a = 2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">运算符左侧除以右侧的余数</td><td style="text-align:center">b % a = 0</td></tr><tr><td style="text-align:center">+ +</td><td style="text-align:center">自增，当前数值 + 1</td><td style="text-align:center">b++, b = 3</td></tr><tr><td style="text-align:center">- -</td><td style="text-align:center">自减，当前数值 - 1</td><td style="text-align:center">b–, b = 1</td></tr></tbody></table><p><strong>注意</strong>：自增和自减有两种形态：”前缀“和”后缀“，当单独使用的时候，两者并无区别，都是使当前操作的数值 +1 或 -1 ，但是当在表达式中使用的时候，二者就不太一样了，前缀形式会先完成 + 1；而后缀形式则会采用变量原来的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int m = 7;</span><br><span class="line">int n = 7;</span><br><span class="line">int a = 2 * ++m; // a = 16, m = 8</span><br><span class="line">int b = 2 * n++; // b = 14, n = 7</span><br></pre></td></tr></table></figure></p><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><p>关系运算符的结果为布尔值（ true / false） 设 a = 1，b = 2</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">运算符两侧数值是否相等，如果相等结果为true</td><td style="text-align:center">a == b为false</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">运算符两侧数值是否不相等，如果不相等结果为true</td><td style="text-align:center">a != b为true</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">运算符左侧的数值大于右侧，结果为true</td><td style="text-align:center">b &gt; a为true</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">运算符左侧的数值小于右侧，结果为true</td><td style="text-align:center">a &lt; b为true</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">运算符左侧的数值大于等于右侧，结果为true</td><td style="text-align:center">b &gt;= a为true</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">运算符左侧的数值小于等于右侧，结果为true</td><td style="text-align:center">a &lt;= b为true</td></tr></tbody></table><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且<strong>按位运算</strong>。假设a = 60，b = 13；他们的二进制格式表示将如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = 0011 1100;</span><br><span class="line">b = 0000 1101;</span><br><span class="line"></span><br><span class="line">a &amp; b = 0000 1100</span><br><span class="line">a | b = 0011 1101</span><br><span class="line">a ^ b = 0011 0001</span><br><span class="line">~a = 1100 0011</span><br><span class="line">a &lt;&lt; 2 = 1111 0000</span><br><span class="line">a &gt;&gt; 2 = 1111</span><br><span class="line">a &gt;&gt;&gt; 2 = 0000 1111</span><br></pre></td></tr></table></figure><p>运算规则如下</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">同1为1，否则为0</td><td style="text-align:center">a &amp; b = 0000 1100</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">同0为0，否则为1</td><td style="text-align:center">a &#124; b == 0011 1101 </td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">相同为0，否则为1</td><td style="text-align:center">a ^ b = 0011 0001</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">按位取反</td><td style="text-align:center">~a = 1100 0011</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">按位左移运算符，左操作数按位左移右操作数指定的位数</td><td style="text-align:center">a &lt;&lt; 2 即 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">按位右移运算符，左操作数按位右移右操作数指定的位数</td><td style="text-align:center">a &gt;&gt; 2 即 1111</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td style="text-align:center">a &gt;&gt;&gt; 2 即 0000 1111</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>a为true，b为false</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">逻辑与运算符，当运算符两侧都为true时，结果才为true，否则为false</td><td style="text-align:center">a &amp; b为false</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑与运算符，当运算符两侧都为true时，结果才为true，否则为false，如果左侧为false将不再执行运算符右侧</td><td style="text-align:center">a &amp;&amp; b为false</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">逻辑或运算符，当运算符两侧都为false时，结果才为false，否则为true</td><td style="text-align:center">a &#124; b为true</td></tr><tr><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">逻辑或运算符，当运算符两侧都为false时，结果才为false，否则为true，如果左侧为true将不再执行运算符右侧</td><td style="text-align:center">a &#124;&#124; b为true</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">逻辑非运算符，如果运算符右侧为true，则结果为false，反之亦然</td><td style="text-align:center">!a为false，!b为true</td></tr></tbody></table><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">基础的赋值运算符，将右边的值赋给左边</td><td style="text-align:center">c = a + b 就是将 a + b 的值赋给 c</td></tr></tbody></table><h1 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（? : ）"></a>条件运算符（? : ）</h1><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符主要是判断把哪个值赋给变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b;</span><br><span class="line">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span><br><span class="line">b = (a == 1) ? 20 : 30; //此时b = 30</span><br><span class="line">b = (a == 10) ? 20 : 30;//此时b = 20</span><br></pre></td></tr></table></figure><h1 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h1><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p>instanceof运算符使用格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vehicle a = new Car();</span><br><span class="line">boolean result = a instanceof Car;</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure></p><h1 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h1><p>最高优先级在该表上方，最低优先级在该表底部</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">操作符</th><th style="text-align:center">关联性</th></tr></thead><tbody><tr><td style="text-align:center">后缀</td><td style="text-align:center">(),[],<strong>.</strong>(点操作符)</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">一元</td><td style="text-align:center">++,–,!</td><td style="text-align:center">右到左</td></tr><tr><td style="text-align:center">乘性</td><td style="text-align:center">*,/,%</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">加性</td><td style="text-align:center">+,-</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">移位</td><td style="text-align:center">&gt;&gt;,&gt;&gt;&gt;,&lt;&lt;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">关系</td><td style="text-align:center">&gt;,&gt;=,=,&lt;=,&lt;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">相等</td><td style="text-align:center">==，!=</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">按位与</td><td style="text-align:center">&amp;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">按位异或</td><td style="text-align:center">^</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">按位或</td><td style="text-align:center">&#124;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">逻辑与</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">逻辑或</td><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">条件（三元）</td><td style="text-align:center">? :</td><td style="text-align:center">左到右</td></tr><tr><td style="text-align:center">赋值</td><td style="text-align:center">=，+=，-=等等</td><td style="text-align:center">右到左</td></tr><tr><td style="text-align:center">逗号</td><td style="text-align:center">，</td><td style="text-align:center">左到右</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/java/java-operators.html" target="_blank" rel="noopener">Java运算符|菜鸟驿站</a><br><a href="https://book.douban.com/subject/30326049/" target="_blank" rel="noopener">Core Java Volume Ⅰ-Fundamentals</a></p><p>上一节：<a href="http://pcging.cn/2019/03/29/basicDataType/">Java基础系列（一）：基础数据类型</a><br>下一节：<a href="http://pcging.cn/2019/04/02/string/">Java基础系列（三）：字符串</a></p><p>本节转自<a href="https://blog.csdn.net/vi_young_95/article/details/80558433" target="_blank" rel="noopener">https://blog.csdn.net/vi_young_95/article/details/80558433</a></p><div align="center"><img src="/img/viYoung.dib" alt="微信扫一扫，关注原创公众号" title="微信扫一扫，关注原创公众号">微信扫一扫，关注原创公众号</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：&lt;/p
      
    
    </summary>
    
    
      <category term="javabasic" scheme="http://pcging.cn/tags/javabasic/"/>
    
  </entry>
  
  <entry>
    <title>Java基础系列（一）：基础数据类型</title>
    <link href="http://pcging.cn/2019/03/29/basicDataType/"/>
    <id>http://pcging.cn/2019/03/29/basicDataType/</id>
    <published>2019-03-29T03:46:57.000Z</published>
    <updated>2019-04-02T09:46:26.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型，1种用于表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型</p><h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><p>整型用于表示没有小数部分的数值，允许为负。</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>int</td><td style="text-align:center">4字节</td><td style="text-align:right">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td>short</td><td style="text-align:center">2字节</td><td style="text-align:right">-32,768 ~ 32,767</td></tr><tr><td>long</td><td style="text-align:center">8字节</td><td style="text-align:right">-9,223,372,036,854,775,808 ~ 9223,372,036,854,775,807</td></tr><tr><td>byte</td><td style="text-align:center">1字节</td><td style="text-align:right">-128 ~ 127</td></tr></tbody></table><p>在Java中，整形的范围与运行Java代码的机器无关。这解决了软件从一个平台移植到另外一个平台，或者在同一个平台的不同操作系统之间进行移植给程序员带来的麻烦。<br>长整形（Long类型）数值后有一个后缀 L 或 l（这里建议不要使用小写的 l 来标识，因为在某些字体的格式下，1和 l 几乎没有任何区别，给月阅读的人带来很大的困扰）。<br>十六进制数值前缀为 0x 或 0X，这里需要说一点，八进制的前缀是0，比如010，这样的写法比较容易让人混淆，所以我们一般不要使用八进制来表示数据。<br>二进制数值的前缀为 0b 或 0B，例如0b1001所代表的十进制数据就是9。<br>从Java7开始，可以在数字字面量加下划线，比如1_000_000，这些下划线的作用仅仅是使代码的易读性更高，编译器在编译的时候会去除这些下划线。</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p>浮点类型用于表示有小数部分的数值，在Java中有两种浮点类型。</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>float</td><td style="text-align:center">4字节</td><td style="text-align:right">大约±3.402,823,47E+38F(有效位为6-7位)</td></tr><tr><td>double</td><td style="text-align:center">8字节</td><td style="text-align:right">大约±1.79769313486231570E+308（有效位15位）</td></tr></tbody></table><p>double表示这种类型的数值精度是float类型的两倍（故有人称double为双精度数值），事实上我们在使用的过程中，绝大多数情况都会选用double，因为float的精度通常无法满足我们的要求。</p><p>float类型的数值有一个后缀 f 或 F，没有后缀的浮点值就是double类型的。</p><p>可以使用十六进制来表示浮点数值，例如 0.125（2的负三次方）可以表示为 0x1.0p-3。在十六进制中，使用p表示指数，而不是e。</p><p>三个特殊的浮点数值:</p><ol><li>正无穷大(Double.POSITIVEINFINITY)</li><li>负无穷大(Double.NEGATIVEINFINITY)</li><li>NAN（Double.NaN）</li></ol><h1 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h1><p>一个或两个char类型的数值可以用来表示一个Unicode字符，在代码中，char类型的字面量值需要用单引号括起来，char类型的值可以表示为以 \u 开头的16进制数值，用于表示一些标点和特殊符号所用。</p><p>一些较为特殊的字符的转移序列如下：</p><table><thead><tr><th>类型</th><th style="text-align:center">存储大小</th><th style="text-align:right">取值范围</th></tr></thead><tbody><tr><td>\b</td><td style="text-align:center">退格</td><td style="text-align:right">\u0008</td></tr><tr><td>\t</td><td style="text-align:center">制表</td><td style="text-align:right">\u0009</td></tr><tr><td>\n</td><td style="text-align:center">换行</td><td style="text-align:right">\u000a</td></tr><tr><td>\r</td><td style="text-align:center">回车</td><td style="text-align:right">\u000d</td></tr><tr><td>\”</td><td style="text-align:center">双引号</td><td style="text-align:right">\u0022</td></tr><tr><td>\’</td><td style="text-align:center">单引号</td><td style="text-align:right">\u0027</td></tr><tr><td>\</td><td style="text-align:center">反斜杠</td><td style="text-align:right">\u005c</td></tr></tbody></table><p><strong> Unicode转义序列会在解析代码之前得到处理（大坑慎入！） </strong></p><p><code>// download uri d:\user\a，这里会报语法错误，因为 \u 后面没有跟着4个十六进制数。</code></p><h1 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h1><p>布尔类型有两个值：false和true，用来判定逻辑条件，整型值和布尔值之间不能互相转换，这一点与C或C++不同，需要留意一下。</p><hr><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《Core Java Volume Ⅰ-Fundamentals》 – Cay S.Horstmann</p><p>下一节：<a href="http://pcging.cn/2019/04/02/operator/">Java基础专题（二）：运算符</a></p><p>本节转自<a href="https://blog.csdn.net/vi_young_95/article/details/80503287" target="_blank" rel="noopener">https://blog.csdn.net/vi_young_95/article/details/80503287</a></p><div align="center"><img src="/img/viYoung.dib" alt="微信扫一扫，关注原创公众号" title="微信扫一扫，关注原创公众号">微信扫一扫，关注原创公众号</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型
      
    
    </summary>
    
    
      <category term="javabasic" scheme="http://pcging.cn/tags/javabasic/"/>
    
  </entry>
  
</feed>
